/**
 * Riyadh Dictionary API
 * API documentaion for Riyadh Dictionary
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

/**
 *
 * @export
 * @interface AlriyadhCreateLexicalEntryDto
 */
export interface AlriyadhCreateLexicalEntryDto {
  /**
   *
   * @type {LexicalEntryLemma}
   * @memberof AlriyadhCreateLexicalEntryDto
   */
  lemma: LexicalEntryLemma;
  /**
   *
   * @type {Array<LexicalEntryStem>}
   * @memberof AlriyadhCreateLexicalEntryDto
   */
  stems: Array<LexicalEntryStem>;
  /**
   *
   * @type {Array<LexicalEntryWordForm>}
   * @memberof AlriyadhCreateLexicalEntryDto
   */
  wordForms: Array<LexicalEntryWordForm>;
  /**
   *
   * @type {Array<Sense>}
   * @memberof AlriyadhCreateLexicalEntryDto
   */
  senses: Array<Sense>;
  /**
   *
   * @type {string}
   * @memberof AlriyadhCreateLexicalEntryDto
   */
  morphologicalPatterns: string;
  /**
   * القسم الكلامي
   * @type {string}
   * @memberof AlriyadhCreateLexicalEntryDto
   */
  pos: AlriyadhCreateLexicalEntryDto.PosEnum;
  /**
   *
   * @type {string}
   * @memberof AlriyadhCreateLexicalEntryDto
   */
  plain: string;
  /**
   *
   * @type {string}
   * @memberof AlriyadhCreateLexicalEntryDto
   */
  verbOrigin: AlriyadhCreateLexicalEntryDto.VerbOriginEnum;
  /**
   *
   * @type {string}
   * @memberof AlriyadhCreateLexicalEntryDto
   */
  nounOrigin: AlriyadhCreateLexicalEntryDto.NounOriginEnum;
  /**
   *
   * @type {string}
   * @memberof AlriyadhCreateLexicalEntryDto
   */
  originality: AlriyadhCreateLexicalEntryDto.OriginalityEnum;
  /**
   *
   * @type {boolean}
   * @memberof AlriyadhCreateLexicalEntryDto
   */
  hasTanween: boolean;
}

/**
 * @export
 * @namespace AlriyadhCreateLexicalEntryDto
 */
export namespace AlriyadhCreateLexicalEntryDto {
  /**
   * @export
   * @enum {string}
   */
  export enum PosEnum {
    N = <any>'N',
    V = <any>'V',
    A = <any>'A',
    D = <any>'D',
    P = <any>'P',
    I = <any>'I',
    R = <any>'R',
    NC = <any>'NC',
    NA = <any>'NA',
    NL = <any>'NL',
    NT = <any>'NT',
    NM = <any>'NM',
    NG = <any>'NG',
    NF = <any>'NF',
    NO = <any>'NO',
    NI = <any>'NI',
    VI = <any>'VI',
    VT = <any>'VT',
    AR = <any>'AR',
    AS = <any>'AS',
    AO = <any>'AO',
    AP = <any>'AP',
    AA = <any>'AA',
    AX = <any>'AX',
    PP = <any>'PP',
    PD = <any>'PD',
    PR = <any>'PR',
    DL = <any>'DL',
    DT = <any>'DT',
    IV = <any>'IV',
    IS = <any>'IS',
    II = <any>'II',
    IF = <any>'IF',
    IP = <any>'IP',
  }
  /**
   * @export
   * @enum {string}
   */
  export enum VerbOriginEnum {
    S = <any>'s',
    N = <any>'n',
    A = <any>'a',
    M = <any>'m',
    Lmq = <any>'lmq',
    Lmf = <any>'lmf',
  }
  /**
   * @export
   * @enum {string}
   */
  export enum NounOriginEnum {
    S = <any>'s',
    Mn = <any>'mn',
    Mm = <any>'mm',
    Mq = <any>'mq',
  }
  /**
   * @export
   * @enum {string}
   */
  export enum OriginalityEnum {
    M = <any>'M',
    D = <any>'D',
    A = <any>'A',
  }
}
/**
 *
 * @export
 * @interface AlriyadhLookups
 */
export interface AlriyadhLookups {
  /**
   *
   * @type {Array<Lookup>}
   * @memberof AlriyadhLookups
   */
  domains: Array<Lookup>;
  /**
   *
   * @type {Array<Lookup>}
   * @memberof AlriyadhLookups
   */
  countries: Array<Lookup>;
  /**
   *
   * @type {Array<Lookup>}
   * @memberof AlriyadhLookups
   */
  lemmaTypes: Array<Lookup>;
  /**
   *
   * @type {Array<Lookup>}
   * @memberof AlriyadhLookups
   */
  exampleTypes: Array<Lookup>;
}
/**
 *
 * @export
 * @interface Definition
 */
export interface Definition {
  /**
   * تفاصيل الشاهد
   * @type {Definition}
   * @memberof Definition
   */
  statement: Definition;
}
/**
 *
 * @export
 * @interface FormRepresentation
 */
export interface FormRepresentation {
  /**
   * الكلمة
   * @type {string}
   * @memberof FormRepresentation
   */
  form: string;
  /**
   * التمثيل الصوتي
   * @type {string}
   * @memberof FormRepresentation
   */
  phonetic: string;
  /**
   * اللهجة
   * @type {string}
   * @memberof FormRepresentation
   */
  dialect: string;
  /**
   * رابط الملف الصوتي
   * @type {string}
   * @memberof FormRepresentation
   */
  audio: string;
}
/**
 *
 * @export
 * @interface LexicalEntry
 */
export interface LexicalEntry {
  /**
   * تفاصيل المدخل المعجمي
   * @type {LexicalEntryLemma}
   * @memberof LexicalEntry
   */
  lemma: LexicalEntryLemma;
  /**
   * تفاصيل جذر المدخل المعجمي
   * @type {Array<LexicalEntryStem>}
   * @memberof LexicalEntry
   */
  stems: Array<LexicalEntryStem>;
  /**
   * تفاصيل تصريفات المدخل المعجمي
   * @type {Array<LexicalEntryWordForm>}
   * @memberof LexicalEntry
   */
  wordForms: Array<LexicalEntryWordForm>;
  /**
   * تفاصيل معان المدخل المعجمي
   * @type {Array<Sense>}
   * @memberof LexicalEntry
   */
  senses: Array<Sense>;
  /**
   * وزن الكلمة
   * @type {string}
   * @memberof LexicalEntry
   */
  morphologicalPatterns: string;
  /**
   * القسم الكلامي
   * @type {string}
   * @memberof LexicalEntry
   */
  pos: LexicalEntry.PosEnum;
  /**
   * الصحة الإعتلال للفعل
   * @type {string}
   * @memberof LexicalEntry
   */
  verbOrigin: LexicalEntry.VerbOriginEnum;
  /**
   * الصحة الإعتلال للإسم
   * @type {string}
   * @memberof LexicalEntry
   */
  nounOrigin: LexicalEntry.NounOriginEnum;
  /**
   * إصالة الكلمة
   * @type {string}
   * @memberof LexicalEntry
   */
  originality: LexicalEntry.OriginalityEnum;
  /**
   * التنوين
   * @type {boolean}
   * @memberof LexicalEntry
   */
  hasTanween: boolean;
}

/**
 * @export
 * @namespace LexicalEntry
 */
export namespace LexicalEntry {
  /**
   * @export
   * @enum {string}
   */
  export enum PosEnum {
    N = <any>'N',
    V = <any>'V',
    A = <any>'A',
    D = <any>'D',
    P = <any>'P',
    I = <any>'I',
    R = <any>'R',
    NC = <any>'NC',
    NA = <any>'NA',
    NL = <any>'NL',
    NT = <any>'NT',
    NM = <any>'NM',
    NG = <any>'NG',
    NF = <any>'NF',
    NO = <any>'NO',
    NI = <any>'NI',
    VI = <any>'VI',
    VT = <any>'VT',
    AR = <any>'AR',
    AS = <any>'AS',
    AO = <any>'AO',
    AP = <any>'AP',
    AA = <any>'AA',
    AX = <any>'AX',
    PP = <any>'PP',
    PD = <any>'PD',
    PR = <any>'PR',
    DL = <any>'DL',
    DT = <any>'DT',
    IV = <any>'IV',
    IS = <any>'IS',
    II = <any>'II',
    IF = <any>'IF',
    IP = <any>'IP',
  }
  /**
   * @export
   * @enum {string}
   */
  export enum VerbOriginEnum {
    S = <any>'s',
    N = <any>'n',
    A = <any>'a',
    M = <any>'m',
    Lmq = <any>'lmq',
    Lmf = <any>'lmf',
  }
  /**
   * @export
   * @enum {string}
   */
  export enum NounOriginEnum {
    S = <any>'s',
    Mn = <any>'mn',
    Mm = <any>'mm',
    Mq = <any>'mq',
  }
  /**
   * @export
   * @enum {string}
   */
  export enum OriginalityEnum {
    M = <any>'M',
    D = <any>'D',
    A = <any>'A',
  }
}
/**
 *
 * @export
 * @interface LexicalEntryLemma
 */
export interface LexicalEntryLemma {
  /**
   *
   * @type {Array<FormRepresentation>}
   * @memberof LexicalEntryLemma
   */
  formRepresentations: Array<FormRepresentation>;
  /**
   * Lookup code of LexicalEntryLemmaType category:نوع الأصل المعجمي
   * @type {string}
   * @memberof LexicalEntryLemma
   */
  type: string;
}
/**
 *
 * @export
 * @interface LexicalEntryStem
 */
export interface LexicalEntryStem {
  /**
   *
   * @type {Array<FormRepresentation>}
   * @memberof LexicalEntryStem
   */
  formRepresentations: Array<FormRepresentation>;
  /**
   *
   * @type {string}
   * @memberof LexicalEntryStem
   */
  type: string;
}
/**
 *
 * @export
 * @interface LexicalEntryWordForm
 */
export interface LexicalEntryWordForm {
  /**
   *
   * @type {Array<FormRepresentation>}
   * @memberof LexicalEntryWordForm
   */
  formRepresentations: Array<FormRepresentation>;
  /**
   * أنواع الفعل
   * @type {string}
   * @memberof LexicalEntryWordForm
   */
  aspect: LexicalEntryWordForm.AspectEnum;
  /**
   * التعريف والتنكير
   * @type {string}
   * @memberof LexicalEntryWordForm
   */
  def: LexicalEntryWordForm.DefEnum;
  /**
   * جنس الكلمة
   * @type {string}
   * @memberof LexicalEntryWordForm
   */
  gender: LexicalEntryWordForm.GenderEnum;
  /**
   * هل الكلمة من النوع نسب؟
   * @type {boolean}
   * @memberof LexicalEntryWordForm
   */
  isNasab: boolean;
  /**
   * نوع الجمع
   * @type {string}
   * @memberof LexicalEntryWordForm
   */
  numberWordForm: LexicalEntryWordForm.NumberWordFormEnum;
  /**
   * المتكلم والمخاطب والغائب
   * @type {string}
   * @memberof LexicalEntryWordForm
   */
  person: LexicalEntryWordForm.PersonEnum;
  /**
   * هل النكرة من النوع مصغرة
   * @type {boolean}
   * @memberof LexicalEntryWordForm
   */
  isSmall: boolean;
  /**
   * الفعل مبني للمعلوم  | مبني للمجهول
   * @type {string}
   * @memberof LexicalEntryWordForm
   */
  voice: LexicalEntryWordForm.VoiceEnum;
}

/**
 * @export
 * @namespace LexicalEntryWordForm
 */
export namespace LexicalEntryWordForm {
  /**
   * @export
   * @enum {string}
   */
  export enum AspectEnum {
    P = <any>'P',
    S = <any>'S',
    C = <any>'C',
  }
  /**
   * @export
   * @enum {string}
   */
  export enum DefEnum {
    I = <any>'i',
    D = <any>'d',
    D1 = <any>'d1',
    D2 = <any>'d2',
  }
  /**
   * @export
   * @enum {string}
   */
  export enum GenderEnum {
    M = <any>'m',
    F = <any>'f',
    F1 = <any>'f1',
    F2 = <any>'f2',
  }
  /**
   * @export
   * @enum {string}
   */
  export enum NumberWordFormEnum {
    _1 = <any>'1',
    _2 = <any>'2',
    _3 = <any>'3',
    _3s = <any>'3s',
    _3t = <any>'3t',
  }
  /**
   * @export
   * @enum {string}
   */
  export enum PersonEnum {
    _1 = <any>'1',
    _2 = <any>'2',
    _3 = <any>'3',
  }
  /**
   * @export
   * @enum {string}
   */
  export enum VoiceEnum {
    A = <any>'a',
    P = <any>'p',
  }
}
/**
 *
 * @export
 * @interface Lookup
 */
export interface Lookup {
  /**
   *
   * @type {string}
   * @memberof Lookup
   */
  label: string;
  /**
   *
   * @type {string}
   * @memberof Lookup
   */
  code: string;
  /**
   *
   * @type {string}
   * @memberof Lookup
   */
  category: string;
  /**
   *
   * @type {string}
   * @memberof Lookup
   */
  categoryLabel: string;
  /**
   *
   * @type {number}
   * @memberof Lookup
   */
  order: number;
}
/**
 *
 * @export
 * @interface RelationCreateDto
 */
export interface RelationCreateDto {
  /**
   * معرف المعنى المرتبط بالمدخل الأول
   * @type {string}
   * @memberof RelationCreateDto
   */
  entryRightSenseId: string;
  /**
   * معرف المعنى المرتبط بالمدخل الثاني
   * @type {string}
   * @memberof RelationCreateDto
   */
  entryLeftSenseId: string;
  /**
   * نوع العلاقة
   * @type {string}
   * @memberof RelationCreateDto
   */
  relationType: RelationCreateDto.RelationTypeEnum;
}

/**
 * @export
 * @namespace RelationCreateDto
 */
export namespace RelationCreateDto {
  /**
   * @export
   * @enum {string}
   */
  export enum RelationTypeEnum {
    ANTON = <any>'ANTON',
    SYNON = <any>'SYNON',
    IMPLICIT = <any>'IMPLICIT',
    COIN = <any>'COIN',
    SYNDROM = <any>'SYNDROM',
    OTHER = <any>'OTHER',
  }
}
/**
 *
 * @export
 * @interface Sense
 */
export interface Sense {
  /**
   *
   * @type {string}
   * @memberof Sense
   */
  id: string;
  /**
   * تفاصيل التعريف
   * @type {Definition}
   * @memberof Sense
   */
  definition: Definition;
  /**
   * تفاصيل الترجمات
   * @type {Array<SenseTranslation>}
   * @memberof Sense
   */
  translations: Array<SenseTranslation>;
  /**
   * تفاصيل السياقات
   * @type {Array<SenseContext>}
   * @memberof Sense
   */
  contexts: Array<SenseContext>;
  /**
   * list of Lookup codes of Domain category: المجالات
   * @type {Array<string>}
   * @memberof Sense
   */
  domainIds: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Sense
   */
  domains: Array<string>;
  /**
   * تفاصيل الأمثلة
   * @type {Array<SenseExample>}
   * @memberof Sense
   */
  examples: Array<SenseExample>;
  /**
   * تفاصيل علاقات المعنى
   * @type {Array<SenseRelation>}
   * @memberof Sense
   */
  relations: Array<SenseRelation>;
  /**
   * رابط الصورة
   * @type {string}
   * @memberof Sense
   */
  image: string;
}
/**
 *
 * @export
 * @interface SenseContext
 */
export interface SenseContext {
  /**
   * النص
   * @type {string}
   * @memberof SenseContext
   */
  form: string;
  /**
   * التمثيل الصوتي
   * @type {string}
   * @memberof SenseContext
   */
  phonetic: string;
  /**
   * اللهجة
   * @type {string}
   * @memberof SenseContext
   */
  dialect: string;
  /**
   * رابط الملف الصوتي
   * @type {string}
   * @memberof SenseContext
   */
  audio: string;
}
/**
 *
 * @export
 * @interface SenseExample
 */
export interface SenseExample {
  /**
   * النص
   * @type {string}
   * @memberof SenseExample
   */
  form: string;
  /**
   * التمثيل الصوتي
   * @type {string}
   * @memberof SenseExample
   */
  phonetic: string;
  /**
   * اللهجة
   * @type {string}
   * @memberof SenseExample
   */
  dialect: string;
  /**
   * رابط الملف الصوتي
   * @type {string}
   * @memberof SenseExample
   */
  audio: string;
  /**
   * Lookup code of SenseExampleType category :نوع المثال
   * @type {string}
   * @memberof SenseExample
   */
  exampleType: string;
  /**
   * مصدر المثال
   * @type {string}
   * @memberof SenseExample
   */
  source: string;
}
/**
 *
 * @export
 * @interface SenseRelation
 */
export interface SenseRelation {
  /**
   * نوع العلاقة
   * @type {string}
   * @memberof SenseRelation
   */
  type: SenseRelation.TypeEnum;
  /**
   * معرف المعنى صاحب العلاقة
   * @type {string}
   * @memberof SenseRelation
   */
  related: string;
}

/**
 * @export
 * @namespace SenseRelation
 */
export namespace SenseRelation {
  /**
   * @export
   * @enum {string}
   */
  export enum TypeEnum {
    ANTON = <any>'ANTON',
    SYNON = <any>'SYNON',
    IMPLICIT = <any>'IMPLICIT',
    COIN = <any>'COIN',
    SYNDROM = <any>'SYNDROM',
    OTHER = <any>'OTHER',
  }
}
/**
 *
 * @export
 * @interface SenseTranslation
 */
export interface SenseTranslation {
  /**
   * Lookup code Language of category :كود لغة الترجمة
   * @type {string}
   * @memberof SenseTranslation
   */
  language: string;
  /**
   * نص الترجمة
   * @type {string}
   * @memberof SenseTranslation
   */
  form: string;
  /**
   * التمثيل الصوتي
   * @type {string}
   * @memberof SenseTranslation
   */
  phonetic: string;
  /**
   * اللهجة
   * @type {string}
   * @memberof SenseTranslation
   */
  dialect: string;
  /**
   * رابط الملف الصوتي
   * @type {string}
   * @memberof SenseTranslation
   */
  audio: string;
}
